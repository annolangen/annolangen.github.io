{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","ts/spreadsheet.ts","../src/directives/style-map.ts","ts/app.ts"],"names":[],"mappings":"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","file":"app.3b968055.js","sourceRoot":"..","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","// Simple spreadsheet with columns A-Z and rows 0-99. Cells can be set\n// to constant numbers or strings as well as formulas, which are\n// indicated with a leading '='. Formula expressions can be cell\n// references, numeric constants, or operators with formula expression\n// arguments, or for sum and prod, rectangular regions.\nexport interface Spreadsheet {\n  setCell(row: number, col: number, cell: string): void;\n  cell(row: number, col: number): string;\n  value(row: number, col: number): string;\n}\n\nconst ROW_COUNT = 100;\nconst COL_COUNT = 'Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1;\nconst CELL_COUNT = ROW_COUNT * COL_COUNT;\nconst REF_PATTERN = /^([a-z])([0-9][0-9]?)/i; // Cell references A0 to Z99\nconst OP_PATTERN = /^(sum|prod|add|sub|div|mul)[(]/;\nconst ALWAYS_NAN = (depth: number) => NaN;\nconst EMPTY_FORMULA: Formula = newFormula('', ALWAYS_NAN);\n\n// Evaluation obtains values for arguments for (row/col)\n// positions. If there is a cycle, we detect it by incrementing\n// depth every time we dereference.\ninterface Calculator {\n  (depth: number): number;\n}\n\ninterface Formula extends Calculator {\n  displayString: string;\n  value(): string; // Calculated value or displayString, if NaN\n}\n\ntype Env = (row: number, col: number) => Calculator;\n\n// Encapsulates position in text to be parsed.\ninterface ParseState {\n  // Throws syntax error unless the expected string is at the current position\n  match: (expected: string) => void;\n  // Returns result of RegExp.exec and advances current position by match, if successful.\n  tryMatch: (r: RegExp) => RegExpExecArray | null;\n}\n\nexport function newSpreadsheet(): Spreadsheet {\n  const cells: Formula[][] = Array.from({ length: ROW_COUNT }, (_, i) =>\n    Array.from({ length: COL_COUNT }, (_, j) => EMPTY_FORMULA)\n  );\n  const deref = (row: number, col: number) => (depth: number) =>\n    depth > CELL_COUNT ? NaN : cells[row][col](depth + 1);\n  return {\n    value: (row, col) => cells[row][col].value(),\n    cell: (row, col) => cells[row][col].displayString,\n    setCell: (row, col, cell) =>\n      (cells[row][col] = cell.startsWith('=')\n        ? newFormula(cell, parseExpr(newParseState(cell.substr(1)), deref))\n        : parseConstant(cell)),\n  };\n}\n\nfunction newFormula(displayString: string, calc: Calculator): Formula {\n  const result = calc as Formula;\n  result.displayString = displayString;\n  result.value = () => toStringWithFallback(calc(0), displayString);\n  return result;\n}\n\nconst toStringWithFallback = (n: number, fallback: string) =>\n  isNaN(n) ? fallback : String(n);\n\nfunction parseExpr(expr: ParseState, env: Env): Calculator {\n  const refMatch = expr.tryMatch(REF_PATTERN);\n  if (refMatch) {\n    const [row, col] = parseRef(refMatch);\n    return env(row, col);\n  }\n  const opMatch = expr.tryMatch(OP_PATTERN);\n  if (opMatch) {\n    return ARG_PARSER_BY_OP[opMatch[1]](expr, env);\n  }\n  const constMatch = expr.tryMatch(/^[^ ,()]+/);\n  if (!constMatch) {\n    return ALWAYS_NAN;\n  }\n  const n = Number(constMatch[0]);\n  return _ => n;\n}\n\nfunction parseRef(refMatch: RegExpExecArray | null): number[] {\n  if (!refMatch) throw new Error('syntax error: expected reference');\n  return [\n    Number(refMatch[2]),\n    refMatch[1].toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0),\n  ];\n}\n\n// Returns Formula with the given text as display string. The\n// Formula's calculated value is the given text as a number if\n// possible, NaN otherwise.\nfunction parseConstant(text: string): Formula {\n  const n = Number(text);\n  return newFormula(text, _ => n);\n}\n\nconst binOp = (op: (x: number, y: number) => number) => (\n  args: ParseState,\n  env: Env\n): Calculator => {\n  const [first, second] = parseTwoArgs(args, env);\n  return depth => op(first(depth), second(depth));\n};\n\nconst ARG_PARSER_BY_OP: {\n  [key: string]: (args: ParseState, env: Env) => Calculator;\n} = {\n  sum,\n  prod,\n  add: binOp((x, y) => x + y),\n  sub: binOp((x, y) => x - y),\n  div: binOp((x, y) => x / y),\n  mul: binOp((x, y) => x * y),\n};\n\nfunction sum(rect: ParseState, env: Env): Calculator {\n  const argValues = rectValues(parseRect(rect, env));\n  return depth => argValues(depth).reduce((a, n) => a + n, 0);\n}\n\nfunction prod(rect: ParseState, env: Env): Calculator {\n  const argValues = rectValues(parseRect(rect, env));\n  return depth => argValues(depth).reduce((a, n) => a * n, 1);\n}\n\n// Function returning a list of (non-NaN) numbers from the given calculators.\nconst rectValues = (rectCalculators: Calculator[]) => (depth: number) =>\n  rectCalculators.map(f => f(depth)).filter(n => !isNaN(n));\n\nfunction parseTwoArgs(args: ParseState, env: Env): Calculator[] {\n  const first = parseExpr(args, env);\n  if (!args.tryMatch(/^ *, */)) args.match(',');\n  const second = parseExpr(args, env);\n  if (!args.tryMatch(/^ *[)] */)) args.match(')');\n  return [first, second];\n}\n\nfunction parseRect(rect: ParseState, env: Env): Calculator[] {\n  const [ulRow, ulCol] = parseRef(rect.tryMatch(REF_PATTERN));\n  rect.match(':');\n  const [lrRow, lrCol] = parseRef(rect.tryMatch(REF_PATTERN));\n  if (!rect.tryMatch(/^ *[)] */)) rect.match(')');\n  const h = lrRow - ulRow + 1;\n  const w = lrCol - ulCol + 1;\n  return Array.from({ length: h }, (_, i) => ulRow + i).reduce(\n    (acc: Calculator[], i) =>\n      acc.concat(Array.from({ length: w }, (_, j) => env(i, j))),\n    []\n  );\n}\n\nfunction newParseState(text: string): ParseState {\n  let pos = 0;\n  function match(expected: string) {\n    if (text.substr(pos, expected.length) === expected) {\n      pos += expected.length;\n    } else {\n      throw new Error(`Parse error wanted ${expected} at ${text.substr(pos)}`);\n    }\n  }\n  function tryMatch(r: RegExp) {\n    const match = r.exec(text.substr(pos));\n    if (match) {\n      pos += match[0].length;\n    }\n    return match;\n  }\n  return { match, tryMatch };\n}\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst styleMapCache = new WeakMap<AttributePart, StyleInfo>();\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS propertes. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo: StyleInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `styleMap` directive must be used in the style attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {style} = committer.element as HTMLElement;\n\n  // Handle static styles the first time we see a Part\n  if (!styleMapCache.has(part)) {\n    style.cssText = committer.strings.join(' ');\n  }\n\n  // Remove old properties that no longer exist in styleInfo\n  const oldInfo = styleMapCache.get(part);\n  for (const name in oldInfo) {\n    if (!(name in styleInfo)) {\n      if (name.indexOf('-') === -1) {\n        // tslint:disable-next-line:no-any\n        (style as any)[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  }\n\n  // Add or update properties\n  for (const name in styleInfo) {\n    if (name.indexOf('-') === -1) {\n      // tslint:disable-next-line:no-any\n      (style as any)[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n  styleMapCache.set(part, styleInfo);\n});\n","import { html, render, svg } from '../node_modules/lit-html/lit-html';\nimport { newSpreadsheet } from './spreadsheet';\nimport { styleMap } from '../node_modules/lit-html/directives/style-map.js';\n\nfunction newCounter() {\n  let count = 0;\n  return () => html`\n    <form class=\"pure-form\">\n      <label>${count}</label>\n      <div class=\"pure-button pure-button-primary\" @click=${() => (count += 1)}>\n        Count\n      </div>\n    </form>\n  `;\n}\n\nfunction newConverter() {\n  let temp = 32; // in Fahrenheit\n  function fahrenheitInput(this: HTMLInputElement) {\n    temp = Number(this.value);\n  }\n  function celsiusInput(this: HTMLInputElement) {\n    temp = Math.round(Number(this.value) * 1.8 + 32);\n  }\n  return () => html`\n    <form class=\"pure-form\">\n      <input\n        id=\"celsius\"\n        .value=\"${Math.round((temp - 32) / 1.8)}\"\n        @input=${celsiusInput}\n      />\n      <label for=\"celsius\">Celsius =</label>\n      <input id=\"fahrenheit\" .value=\"${temp}\" @input=${fahrenheitInput} />\n      <label for=\"fahrenheit\">Fahrenheit</label>\n    </form>\n  `;\n}\n\nfunction newBooker() {\n  let flightType = 'one-way flight';\n  let out = new Date().toISOString().substr(0, 10); // match yyyy-MM-dd format used by date input\n  let back = out;\n  let booked = false;\n  function typeChange(this: HTMLInputElement) {\n    flightType = this.value;\n  }\n  function outboundChange(this: HTMLInputElement) {\n    out = this.value;\n  }\n  function returnChange(this: HTMLInputElement) {\n    back = this.value;\n  }\n  const bookClick = () => (booked = true);\n  return () => html`\n    <form class=\"pure-form\" style=\"margin:auto;width:fit-content\">\n      <fieldset class=\"pure-group\">\n        <select class=\"pure-input-1\" @change=${typeChange}>\n          <option>one-way flight</option>\n          <option>return flight</option>\n        </select>\n        <input\n          class=\"pure-input-1\"\n          type=\"date\"\n          .value=${out}\n          @change=${outboundChange}\n        />\n        <input\n          class=\"pure-input-1\"\n          type=\"date\"\n          .value=${back}\n          @change=${returnChange}\n          ?disabled=${flightType === 'one-way flight'}\n        />\n        <div\n          class=\"pure-button pure-button-primary pure-input-1\"\n          ?disabled=${flightType !== 'one-way flight' && back <= out}\n          @click=${bookClick}\n        >\n          Book\n        </div>\n      </fieldset>\n    </form>\n    <div style=\"display:${booked ? 'block' : 'none'}\">\n      You have booked a ${flightType} on\n      ${out}${flightType !== 'one-way flight' ? ' returning on ' + back : ''}.\n    </div>\n  `;\n}\n\nfunction newTimer() {\n  let elapsed = 0;\n  let duration = 25;\n  let timer: number | null = setInterval(tick, 100);\n  function tick() {\n    if (elapsed < duration) {\n      elapsed = Math.round(10 * elapsed + 1) / 10;\n    } else {\n      elapsed = duration;\n      clearInterval(timer!);\n      timer = null;\n    }\n    renderBody();\n  }\n  function durationChange(this: HTMLInputElement) {\n    duration = Number(this.value);\n  }\n\n  function reset() {\n    elapsed = 0;\n    if (!timer) {\n      timer = setInterval(tick, 100);\n    }\n  }\n  return () => html`\n    <style>\n      td {\n        padding: 0.5em 1em;\n      }\n    </style>\n    <table>\n      <tr>\n        <td style=\"text-align:right\">Elapsed time</td>\n        <td style=\"width:20em\">\n          <progress value=${elapsed} max=${duration} style=\"width:100%\">\n            Progress: ${Math.min(100, (100 * elapsed) / duration)}%\n          </progress>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"text-align:right\">Elapsed seconds</td>\n        <td>${elapsed}</td>\n      </tr>\n      <tr>\n        <td style=\"text-align:right\">Duration</td>\n        <td>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"60\"\n            .value=\"${duration}\"\n            style=\"width:100%\"\n            @input=${durationChange}\n          />\n        </td>\n      </tr>\n    </table>\n\n    <div class=\"pure-button pure-button-primary\" @click=${reset}>Reset</div>\n  `;\n}\n\nfunction newCrud() {\n  let prefix = '';\n  let selected: number | undefined = undefined;\n  const nameList = ['Emil, Hans', 'Mustermann, Max', 'Tisch, Roman'];\n  const first = document.createElement('input');\n  const last = document.createElement('input');\n  first.type = 'text';\n  last.type = 'text';\n  function prefixChange(this: HTMLInputElement) {\n    prefix = this.value;\n  }\n  function selectionChange(this: HTMLInputElement) {\n    selected = Number(this.value);\n    const match = nameList[selected].match('([^,]*), (.*)');\n    if (match) {\n      last.value = match[1];\n      first.value = match[2];\n    }\n  }\n  function resetSelection() {\n    selected = undefined;\n    last.value = '';\n    first.value = '';\n  }\n  function create() {\n    nameList.push(last.value + ', ' + first.value);\n    resetSelection();\n  }\n  const update = () =>\n    (nameList[selected || 0] = last.value + ', ' + first.value);\n  function Delete() {\n    delete nameList[selected || 0];\n    resetSelection();\n  }\n  return () => html`\n    <form class=\"pure-form pure-form-aligned\">\n      <div>\n        <label>Filter prefix:</label>\n        <input type=\"text\" .value=${prefix} @input=${prefixChange} />\n      </div>\n      <div>\n        <select size=\"2\" style=\"height:100px\" @change=${selectionChange}>\n          ${nameList.map((name, i) =>\n            !prefix.length || name.startsWith(prefix)\n              ? html`\n                  <option value=${i}>${name}</option>\n                `\n              : html``\n          )}\n        </select>\n        <fieldset style=\"display:inline-block;vertical-align:middle;\">\n          <div class=\"pure-control-group\"><label>Surname:</label>${last}</div>\n          <div class=\"pure-control-group\"><label>Name:</label>${first}</div>\n        </fieldset>\n      </div>\n      <div>\n        <span class=\"pure-button pure-button-primary\" @click=${create}\n          >Create</span\n        >\n        <span\n          class=\"pure-button pure-button-primary\"\n          ?disabled=${selected === undefined}\n          @click=${update}\n          >Update</span\n        >\n        <span\n          class=\"pure-button pure-button-primary\"\n          ?disabled=${selected === undefined}\n          @click=${Delete}\n          >Delete</span\n        >\n      </div>\n    </form>\n  `;\n}\n\ninterface Circle {\n  x: number;\n  y: number;\n  r: number;\n}\n\ntype State = Circle[];\n\nfunction newCircles() {\n  let state: State = [];\n  let selected: number | undefined = undefined;\n  const undo: State[] = [];\n  const redo: State[] = [];\n  function newCircle(this: SVGElement, e: MouseEvent) {\n    undo.push(state);\n    selected = undefined;\n    const svg = this.getBoundingClientRect();\n    state = [...state, { x: e.x - svg.left, y: e.y - svg.top, r: 20 }];\n  }\n  function adjustRadius(this: HTMLInputElement) {\n    state[selected!].r = Number(this.value);\n  }\n  function selectHandler(index: number) {\n    return selectCircle;\n    function selectCircle(this: SVGCircleElement, e: MouseEvent) {\n      selected = index;\n      undo.push(state);\n      // New state with fresh copy of selected circle\n      state = [...state];\n      state[selected] = { ...state[selected] };\n      e.stopPropagation(); // prevent creating a new circle in addition\n      renderBody();\n    }\n  }\n  function Undo() {\n    redo.push(state);\n    state = undo.pop() as State;\n  }\n  function Redo() {\n    undo.push(state);\n    state = redo.pop() as State;\n  }\n  function advanceState(nextState: State) {\n    undo.push(state);\n    state = nextState;\n    renderBody();\n  }\n  const radiusControl = ({ x, y, r }: Circle) => html`\n    <p class=\"pure-form\">\n      <label>Adjust radius of circle at (${x}, ${y}):</label>\n      <input type=\"range\" @input=${adjustRadius} .value=${r} />\n    </p>\n  `;\n  return () => html`\n    <div style=\"content-align:center\">\n      <span\n        class=\"pure-button pure-button-primary\"\n        ?disabled=${!undo.length}\n        @click=${Undo}\n        >Undo</span\n      >\n      <span\n        class=\"pure-button pure-button-primary\"\n        ?disabled=${!redo.length}\n        @click=${Redo}\n        >Redo</span\n      >\n    </div>\n    <svg @click=${newCircle} style=\"border: 2px solid; width:100%; height:60ex\">\n      ${state.map(\n        ({ x, y, r }, index) =>\n          svg`\n          <circle cx=${x} cy=${y} r=${r} \n            style=\"fill:${\n              index === selected ? 'grey' : 'transparent'\n            };stroke-width: 1;stroke: black;transition: fill 0.2s ease 0s;\"\n             @click=${selectHandler(index)}>\n          </circle>`\n      )}\n    </svg>\n    ${selected === undefined ? '' : radiusControl(state[selected])}\n  `;\n}\n\nfunction newCells() {\n  let selected: { i: number; j: number } | undefined = undefined;\n  const sheet = newSpreadsheet();\n  const editableCell = document.createElement('td');\n  editableCell.contentEditable = 'true';\n  editableCell.addEventListener('keydown', keydown);\n  const hookByKey: { [key: string]: (i: number, j: number) => void } = {\n    Enter: (i, j) => (selected = undefined),\n    ArrowRight: (i, j) => j < 26 && (selected!.j += 1),\n    ArrowLeft: (i, j) => j > 0 && (selected!.j -= 1),\n    ArrowUp: (i, j) => i > 0 && (selected!.i -= 1),\n    ArrowDown: (i, j) => i < 99 && (selected!.i += 1),\n  };\n  function keydown(this: HTMLTableDataCellElement, ev: KeyboardEvent) {\n    if (selected) {\n      const hook = hookByKey[ev.key];\n      if (hook) {\n        const { i, j } = selected!;\n        sheet.setCell(i, j, this.innerText);\n        hook(i, j);\n        renderBody();\n        if (selected) {\n          editableCell.innerText = sheet.cell(selected.i, selected.j);\n          editableCell.focus();\n        }\n      }\n    }\n  }\n  return () => html`\n    <style>\n      #sheet th {\n        min-width: 6ch;\n        border: 1px solid #cbcbcb;\n      }\n      #sheet td:first-child,\n      #sheet tr:first-child {\n        background-color: #f7f7f7;\n        user-select: none;\n        text-align: center;\n      }\n    </style>\n    <div style=\"height: 66ex;overflow:auto\">\n      <table id=\"sheet\" class=\"pure-table pure-table-bordered\">\n        <tr>\n          <th style=\"min-width:1ch\"></th>\n          ${Array.from(\n            { length: 26 },\n            (_, i) =>\n              html`\n                <th>${String.fromCharCode(65 + i)}</th>\n              `\n          )}\n        </tr>\n        ${Array.from(\n          { length: 100 },\n          (_, i) => html`\n            <tr>\n              <td><b>${i}</b></td>\n              ${Array.from({ length: 26 }, (_, j) => {\n                return selected && selected.i === i && selected.j === j\n                  ? editableCell\n                  : html`\n                      <td\n                        @click=${(e: MouseEvent) => {\n                          selected = { i, j };\n                          editableCell.innerText = sheet.cell(i, j);\n                          renderBody();\n                          editableCell.focus();\n                        }}\n                      >\n                        ${sheet.value(i, j)}\n                      </td>\n                    `;\n              })}\n            </tr>\n          `\n        )}\n      </table>\n    </div>\n    <p>\n      Click inside a cell to edit its content. Hit enter to apply. Click outside\n      the cell or hit escape to abort. Here are some example contents: '5.5',\n      'Some text', '=A1', '=sum(B2:C4)', '=div(C1, 5)'.\n    </p>\n  `;\n}\n\nconst examples = {\n  counter: { name: 'Counter', render: newCounter() },\n  converter: { name: 'Temperature Converter', render: newConverter() },\n  booker: { name: 'Flight Booker', render: newBooker() },\n  timer: { name: 'Timer', render: newTimer() },\n  crud: { name: 'CRUD', render: newCrud() },\n  drawer: { name: 'Circle Drawer', render: newCircles() },\n  cells: { name: 'Cells', render: newCells() },\n};\n\nconst renderBody = () =>\n  render(\n    html`\n      <div\n        class=\"pure-menu-scrollable pure-menu-horizontal\"\n        style=\"height:32px;background-color:blanchedalmond\"\n      >\n        <div class=\"pure-menu-heading\">Examples</div>\n        <ul class=\"pure-menu-list\">\n          ${Object.entries(examples).map(\n            ([k, { name }]) =>\n              html`\n                <li class=\"pure-menu-item\">\n                  <a href=\"#${k}\" class=\"pure-menu-link\">${name}</a>\n                </li>\n              `\n          )}\n        </ul>\n      </div>\n      <p></p>\n      <div\n        style=\"margin-left:auto; margin-right:auto; max-width:48em; color:#777\"\n      >\n        ${Object.entries(examples).map(\n          ([k, { render }]) =>\n            html`\n              <div\n                style=\"${styleMap(\n                  '#' + k === window.location.hash ? {} : { display: 'none' }\n                )}\"\n              >\n                ${render()}\n              </div>\n            `\n        )}\n      </div>\n    `,\n    document.body\n  );\n\nif (!window.location.hash) {\n  window.location.hash = 'counter';\n}\nrenderBody();\nwindow.addEventListener('change', renderBody);\nwindow.addEventListener('click', renderBody);\nwindow.addEventListener('hashchange', renderBody);\nwindow.addEventListener('input', renderBody);\n"]}